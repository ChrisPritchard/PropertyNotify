namespace tests;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

public class GeneratorTests
{
    private static string Convert(string source)
    {
        var compilation = CSharpCompilation.Create("Test")
            .AddReferences(MetadataReference.CreateFromFile(typeof(object).Assembly.Location))
            .AddReferences(MetadataReference.CreateFromFile(typeof(PropertyNotify.NotifyAttribute).Assembly.Location))
            .AddSyntaxTrees(CSharpSyntaxTree.ParseText(source));

        var generator = new PropertyNotify.Generator();

        CSharpGeneratorDriver.Create(generator)
            .RunGeneratorsAndUpdateCompilation(compilation, out var outputCompilation, out var diagnostics);

        if (diagnostics.Any())
            Assert.Fail(diagnostics.ToString());

        var result = outputCompilation.SyntaxTrees.ToArray()[1];
        return result.ToString();
    }

    [Fact]
    public void BasicConversion()
    {
        var source = @"
using PropertyNotify;
        
public partial class TestClass
{
    [Notify]
    public partial string TestProp { get; set; }

    private void OnPropertyChanged() {}
}";

        var target = @"// <auto-generated/>
using System.Collections.Generic;

    public partial class TestClass
    {
        private string _testProp;

        public partial string TestProp
        {
            get => _testProp;
            set
            {
                if (!EqualityComparer<string>.Default.Equals(_testProp, value))
                {
                    _testProp = value;
                    OnPropertyChanged();
                }
            }
        }
    }
";

        Assert.Equal(target, Convert(source));
    }

    [Fact]
    public void DifferentMethod()
    {
        var source = @"
using PropertyNotify;
        
public partial class TestClass
{
    [Notify(""UpdateProperties"")]
    public partial string TestProp { get; set; }

    private void UpdateProperties() {}
}";

        var target = @"// <auto-generated/>
using System.Collections.Generic;

    public partial class TestClass
    {
        private string _testProp;

        public partial string TestProp
        {
            get => _testProp;
            set
            {
                if (!EqualityComparer<string>.Default.Equals(_testProp, value))
                {
                    _testProp = value;
                    UpdateProperties();
                }
            }
        }
    }
";

        Assert.Equal(target, Convert(source));
    }

    [Fact]
    public void PassName()
    {
        var source = @"
using PropertyNotify;
        
public partial class TestClass
{
    [Notify(pass_changed_name = true)]
    public partial string TestProp { get; set; }

    private void OnPropertyChanged(string name) {}
}";

        var target = @"// <auto-generated/>
using System.Collections.Generic;

    public partial class TestClass
    {
        private string _testProp;

        public partial string TestProp
        {
            get => _testProp;
            set
            {
                if (!EqualityComparer<string>.Default.Equals(_testProp, value))
                {
                    _testProp = value;
                    OnPropertyChanged(nameof(TestProp));
                }
            }
        }
    }
";

        Assert.Equal(target, Convert(source));
    }

    [Fact]
    public void BothParamsDifferentOrder()
    {
        var source = @"
using PropertyNotify;
        
public partial class TestClass
{
    [Notify(pass_changed_name = true, method_name = ""CallThis"")]
    public partial string TestProp { get; set; }

    private void CallThis(string name) {}
}";

        var target = @"// <auto-generated/>
using System.Collections.Generic;

    public partial class TestClass
    {
        private string _testProp;

        public partial string TestProp
        {
            get => _testProp;
            set
            {
                if (!EqualityComparer<string>.Default.Equals(_testProp, value))
                {
                    _testProp = value;
                    CallThis(nameof(TestProp));
                }
            }
        }
    }
";

        Assert.Equal(target, Convert(source));
    }
}
