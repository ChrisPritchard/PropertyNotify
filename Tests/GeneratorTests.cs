namespace tests;

using Basic.Reference.Assemblies;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using PropertyNotify;
using Xunit;

public class GeneratorTests
{
    private static string Convert(string source)
    {

        var compilation = CSharpCompilation.Create("TestClass.dll",
            [CSharpSyntaxTree.ParseText(source)],
            Net90.References.All);

        CSharpGeneratorDriver.Create(new Generator())
            .RunGeneratorsAndUpdateCompilation(compilation, out var outputCompilation, out var diagnostics);

        if (diagnostics.Any())
            Assert.Fail(diagnostics.ToString());

        var all = outputCompilation.SyntaxTrees.Select(o => o.ToString()).ToArray();

        var result = outputCompilation.SyntaxTrees.ToArray()[2];
        return result.ToString();
    }

    [Fact]
    public void BasicConversion()
    {
        var source = @"        
public partial class TestClass
{
    [PropertyNotify.NotifyAttribute]
    public partial string TestProp { get; set; }

    private void OnPropertyChanged() {}
}";

        var target = @"// <auto-generated/>
using System.Collections.Generic;

public partial class TestClass
{
    private string _testProp;

    public partial string TestProp
    {
        get => _testProp;
        set
        {
            if (!EqualityComparer<string>.Default.Equals(_testProp, value))
            {
                _testProp = value;
                OnPropertyChanged();
            }
        }
    }

}
";

        Assert.Equal(target, Convert(source));
    }

    [Fact]
    public void DifferentMethod()
    {
        var source = @"
public partial class TestClass
{
    [PropertyNotify.Notify(""UpdateProperties"")]
    public partial string TestProp { get; set; }

    private void UpdateProperties() {}
}";

        var target = @"// <auto-generated/>
using System.Collections.Generic;

public partial class TestClass
{
    private string _testProp;

    public partial string TestProp
    {
        get => _testProp;
        set
        {
            if (!EqualityComparer<string>.Default.Equals(_testProp, value))
            {
                _testProp = value;
                UpdateProperties();
            }
        }
    }

}
";

        Assert.Equal(target, Convert(source));
    }

    [Fact]
    public void PassName()
    {
        var source = @"
public partial class TestClass
{
    [PropertyNotify.Notify(pass_changed_name: true)]
    public partial string TestProp { get; set; }

    private void OnPropertyChanged(string name) {}
}";

        var target = @"// <auto-generated/>
using System.Collections.Generic;

public partial class TestClass
{
    private string _testProp;

    public partial string TestProp
    {
        get => _testProp;
        set
        {
            if (!EqualityComparer<string>.Default.Equals(_testProp, value))
            {
                _testProp = value;
                OnPropertyChanged(nameof(TestProp));
            }
        }
    }

}
";

        Assert.Equal(target, Convert(source));
    }

    [Fact]
    public void BothParamsDifferentOrder()
    {
        var source = @"
public partial class TestClass
{
    [PropertyNotify.Notify(pass_changed_name: true, method_name: ""CallThis"")]
    public partial string TestProp { get; set; }

    private void CallThis(string name) {}
}";

        var target = @"// <auto-generated/>
using System.Collections.Generic;

public partial class TestClass
{
    private string _testProp;

    public partial string TestProp
    {
        get => _testProp;
        set
        {
            if (!EqualityComparer<string>.Default.Equals(_testProp, value))
            {
                _testProp = value;
                CallThis(nameof(TestProp));
            }
        }
    }

}
";

        Assert.Equal(target, Convert(source));
    }

    [Fact]
    public void WithNamespaces()
    {
        var source = @"
namespace TestNamespace;

public partial class TestClass
{
    [PropertyNotify.Notify(pass_changed_name: true, method_name: ""CallThis"")]
    public partial string TestProp { get; set; }

    private void CallThis(string name) {}
}";

        var target = @"// <auto-generated/>
namespace TestNamespace;

using System.Collections.Generic;

public partial class TestClass
{
    private string _testProp;

    public partial string TestProp
    {
        get => _testProp;
        set
        {
            if (!EqualityComparer<string>.Default.Equals(_testProp, value))
            {
                _testProp = value;
                CallThis(nameof(TestProp));
            }
        }
    }

}
";

        Assert.Equal(target, Convert(source));
    }
}
